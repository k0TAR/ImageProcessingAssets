#pragma kernel BilateralFilter

Texture2D<float4> Input;
RWTexture2D<float4> Result;
uint FilterSize;
float Weight;
float Sigma;
RWStructuredBuffer<float> GaussianFilter;

float IntensityLength(float3 a, float3 b, float sigma)
{
    float d = (a.x - b.x) * (a.x - b.x) +
            +(a.y - b.y) * (a.y - b.y) +
            +(a.z - b.z) * (a.z - b.z);
    return exp(-d / (2.0 * sigma * sigma));
}

[numthreads(8,8,1)]
void BilateralFilter(uint3 id : SV_DispatchThreadID)
{
    /*

    */
    float sum = 0.0;
    float3 color = float3(0.0, 0.0, 0.0);
    float3 centerColor = Input[id.xy].xyz;
    
    for (uint dx = 0; dx < FilterSize; dx++)
    {
        for (uint dy = 0; dy < FilterSize; dy++)
        {
            float gaussianFilterItem = GaussianFilter[dx * (FilterSize - 1) + dy];
            float3 currentPixelColor = Input[id.xy + int2(dx - FilterSize / 2, dy - FilterSize / 2)].xyz;
            float weight = gaussianFilterItem * IntensityLength(currentPixelColor, centerColor, Sigma);
            color += weight * currentPixelColor;
            sum += weight;
        }
    }
    Result[id.xy] = float4(color / sum, 1.0);
}
