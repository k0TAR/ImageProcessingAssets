// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> Result;
static const float PI = 3.14159265f;

float GaborFunction(int2 coord, float sigma, float theta, float lambda, float gamma, float psi)
{
    float sigma_x = sigma;
    float sigma_y = sigma / gamma;
    float sig_x = -1 / (2 * sigma_x * sigma_x);
    float sig_y = -1 / (2 * sigma_y * sigma_y);
    
    float xr = coord.x * cos(theta) + coord.y * sin(theta);
    float yr = -coord.x * sin(theta) + coord.y * cos(theta);

    float cscale = 2 * PI / lambda;
    
    
    return exp(sigma_x * xr * xr + sigma_y * yr * yr) * cos(cscale * xr + psi);

}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

    Result[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
}
