// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
static const float PI = 3.14159265f;
RWTexture2D<float4> Result;
Texture2D<float4> Input;
RWStructuredBuffer<float> GaborKernel; 
int KernelSize;
float Weight;
int IsAlpha;


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{

    for (uint dx = 0; dx < KernelSize; dx++)
    {
        for (uint dy = 0; dy < KernelSize; dy++)
        {
            float KernelValue = GaborKernel[dx * KernelSize + dy];
            Result[id.xy] += Input[id.xy + int2(dx - KernelSize / 2, dy - KernelSize / 2)] 
                * KernelValue / Weight;
        }
    }
    Result[id.xy] = float4(Result[id.xy].xyz, Result[id.xy].z > .1 ? 1 : !IsAlpha);

}
