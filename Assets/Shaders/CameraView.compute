#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;

struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

struct Plane
{
    float a0;
    float a1;
    float b0;
    float b1;
    float k;
    float normalNumber;
};

Plane CraetePlane(float a0, float a1, float b0, float b1, float k, float normalNumber)
{
    Plane plane;

    plane.a0 = a0;
    plane.a1 = a1;
    plane.b0 = b0;
    plane.b1 = b1;
    plane.k = k;
    plane.normalNumber = normalNumber;
    return plane;
}

void IntersectGroundPlane(Ray ray, inout RayHit bestHit, Plane plane)
{
    int aIndex = 0;
    int bIndex = 1;
    int cIndex = 2;
    float3 normal = float3(0, 0, 1);
    if (plane.normalNumber == 0)
    {
        aIndex = 1; //y
        bIndex = 2; //z
        cIndex = plane.normalNumber;
        normal = float3(1, 0, 0);
    }
    else if (plane.normalNumber == 1)
    {
        aIndex = 2; //z
        bIndex = 0; //x
        cIndex = plane.normalNumber;
        normal = float3(0, 1, 0);
    }
    else if (plane.normalNumber == 2)
    {
        aIndex = 0; //x
        bIndex = 1; //y
        cIndex = plane.normalNumber;
        normal = float3(0, 0, 1);
    }

    
    float t = (plane.k - ray.origin[cIndex]) / ray.direction[cIndex];
    if (t < 0 || t > bestHit.distance)
    {
        return;
    }
    
    float x = ray.origin[aIndex] + t * ray.direction[aIndex];
    float y = ray.origin[bIndex] + t * ray.direction[bIndex];
    if (x < plane.a0 || x > plane.a1 || y < plane.b0 || y > plane.b1)
    {
        return;
    }
    
    bestHit.distance = t;
    bestHit.position = ray.origin + t * ray.direction;
    bestHit.normal = normal;
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    Plane plane = CraetePlane(-4,4,-4,4,16,2);
    IntersectGroundPlane(ray, bestHit, plane);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Return the normal
        return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        return float3(ray.direction * 0.5f + 0.5f);
    }
}

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2( (id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Write some colors
    RayHit hit = Trace(ray);
    float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1);
}