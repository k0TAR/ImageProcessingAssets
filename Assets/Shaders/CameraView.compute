#pragma kernel CSMain
RWTexture2D<float4> Result;
float4x4 _CameraToWorld;
float4x4 _CameraInverseProjection;
float2 LightFieldSize;
RWStructuredBuffer<float4> LightFields;


Texture2D lightField_00_00;
Texture2D lightField_00_01;
Texture2D lightField_00_02;
Texture2D lightField_00_03;
Texture2D lightField_00_04;
Texture2D lightField_00_05;
Texture2D lightField_00_06;
Texture2D lightField_00_07;

Texture2D lightField_01_00;
Texture2D lightField_01_01;
Texture2D lightField_01_02;
Texture2D lightField_01_03;
Texture2D lightField_01_04;
Texture2D lightField_01_05;
Texture2D lightField_01_06;
Texture2D lightField_01_07;

Texture2D lightField_02_00;
Texture2D lightField_02_01;
Texture2D lightField_02_02;
Texture2D lightField_02_03;
Texture2D lightField_02_04;
Texture2D lightField_02_05;
Texture2D lightField_02_06;
Texture2D lightField_02_07;

Texture2D lightField_03_00;
Texture2D lightField_03_01;
Texture2D lightField_03_02;
Texture2D lightField_03_03;
Texture2D lightField_03_04;
Texture2D lightField_03_05;
Texture2D lightField_03_06;
Texture2D lightField_03_07;

Texture2D lightField_04_00;
Texture2D lightField_04_01;
Texture2D lightField_04_02;
Texture2D lightField_04_03;
Texture2D lightField_04_04;
Texture2D lightField_04_05;
Texture2D lightField_04_06;
Texture2D lightField_04_07;

Texture2D lightField_05_00;
Texture2D lightField_05_01;
Texture2D lightField_05_02;
Texture2D lightField_05_03;
Texture2D lightField_05_04;
Texture2D lightField_05_05;
Texture2D lightField_05_06;
Texture2D lightField_05_07;

Texture2D lightField_06_00;
Texture2D lightField_06_01;
Texture2D lightField_06_02;
Texture2D lightField_06_03;
Texture2D lightField_06_04;
Texture2D lightField_06_05;
Texture2D lightField_06_06;
Texture2D lightField_06_07;

Texture2D lightField_07_00;
Texture2D lightField_07_01;
Texture2D lightField_07_02;
Texture2D lightField_07_03;
Texture2D lightField_07_04;
Texture2D lightField_07_05;
Texture2D lightField_07_06;
Texture2D lightField_07_07;




struct Ray
{
    float3 origin;
    float3 direction;
};

Ray CreateRay(float3 origin, float3 direction)
{
    Ray ray;
    ray.origin = origin;
    ray.direction = direction;
    return ray;
}

Ray CreateCameraRay(float2 uv)
{
    // Transform the camera origin to world space
    float3 origin = mul(_CameraToWorld, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(_CameraInverseProjection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(_CameraToWorld, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);
    return CreateRay(origin, direction);
}

struct RayHit
{
    float3 position;
    float distance;
    float3 normal;
};

RayHit CreateRayHit()
{
    RayHit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

struct Plane
{
    float a0;
    float a1;
    float b0;
    float b1;
    float k;
    float normalNumber;
    float2 uv;
};

Plane CraetePlane(float a0, float a1, float b0, float b1, float k, float normalNumber)
{
    Plane plane;

    plane.a0 = a0;
    plane.a1 = a1;
    plane.b0 = b0;
    plane.b1 = b1;
    plane.k = k;
    plane.normalNumber = normalNumber;
    return plane;
}

void IntersectPlane(Ray ray, inout RayHit bestHit, Plane plane)
{
    int aIndex = 0;
    int bIndex = 1;
    int cIndex = 2;
    float3 normal = float3(0, 0, 1);
    if (plane.normalNumber == 0)
    {
        aIndex = 2; //z
        bIndex = 1; //y
        cIndex = plane.normalNumber;
        normal = float3(1, 0, 0);
    }
    else if (plane.normalNumber == 1)
    {
        aIndex = 0; //x
        bIndex = 2; //z
        cIndex = plane.normalNumber;
        normal = float3(0, 1, 0);
    }
    else if (plane.normalNumber == 2)
    {
        aIndex = 0; //x
        bIndex = 1; //y
        cIndex = plane.normalNumber;
        normal = float3(0, 0, 1);
    }

    
    float t = (plane.k - ray.origin[cIndex]) / ray.direction[cIndex];
    if (t < 0 || t > bestHit.distance)
    {
        return;
    }
    
    float x = ray.origin[aIndex] + t * ray.direction[aIndex];
    float y = ray.origin[bIndex] + t * ray.direction[bIndex];
    if (x < plane.a0 || x > plane.a1 || y < plane.b0 || y > plane.b1)
    {
        return;
    }
    
    plane.uv = float2((x - plane.a0) / (plane.a1 - plane.a0), (y - plane.b0) / (plane.b1 - plane.b0));
    
    bestHit.distance = t;
    bestHit.position = ray.origin + t * ray.direction;
    bestHit.normal = normal;
}

RayHit Trace(Ray ray)
{
    RayHit bestHit = CreateRayHit();
    Plane plane = CraetePlane(-4, 4, -4, 4, 16, 2);
    IntersectPlane(ray, bestHit, plane);
    return bestHit;
}

float3 Shade(inout Ray ray, RayHit hit)
{
    if (hit.distance < 1.#INF)
    {
        hit.position.x += 4;
        hit.position.y += 4;
        
        if (frac(hit.position.x) < 0.05)
        {
            return float3(0, 1.0, 0);
        }
        if (frac(hit.position.y) < 0.05)
        {
            return float3(1.0, 0, 0);
        }
        
        if (floor(hit.position.y) < 1)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_00_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_00_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_00_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_00_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_00_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_00_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_00_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_00_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 2)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_01_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_01_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_01_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_01_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_01_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_01_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_01_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_01_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 3)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_02_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_02_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_02_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_02_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_02_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_02_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_02_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_02_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }

        }
        else if (floor(hit.position.y) < 4)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_03_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_03_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_03_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_03_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_03_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_03_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_03_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_03_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 5)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_04_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_04_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_04_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_04_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_04_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_04_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_04_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_04_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 6)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_05_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_05_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_05_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_05_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_05_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_05_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_05_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_05_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 7)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_06_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_06_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_06_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_06_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_06_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_06_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_06_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_06_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        else if (floor(hit.position.y) < 8)
        {
            if (floor(hit.position.x) < 1)
            {
                return lightField_07_00[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 2)
            {
                return lightField_07_01[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 3)
            {
                return lightField_07_02[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 4)
            {
                return lightField_07_03[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 5)
            {
                return lightField_07_04[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 6)
            {
                return lightField_07_05[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 7)
            {
                return lightField_07_06[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
            else if (floor(hit.position.x) < 8)
            {
                return lightField_07_07[int2(floor(frac(hit.position.x) * LightFieldSize.x), floor(frac(hit.position.y) * LightFieldSize.y))].xyz; //
            }
        }
        //return LightFields[floor(hit.position.x) * LightFieldSize.x * LightFieldSize.y + floor(hit.position.y) * LightFieldSize.x * LightFieldSize.y * 17
        //+ floor(frac(hit.position.x) * LightFieldSize.x) + floor(frac(hit.position.y) * LightFieldSize.y) * LightFieldSize.x].xyz;
        
        // Return the normal
        //return hit.normal * 0.5f + 0.5f;
    }
    else
    {
        return float3(ray.direction * 0.5f + 0.5f);
    }
    
    return float3(1.0, 0, 0);
}

[numthreads(16, 16, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    Result.GetDimensions(width, height);
    // Transform pixel to [-1,1] range
    float2 uv = float2( (id.xy + float2(0.5f, 0.5f)) / float2(width, height) * 2.0f - 1.0f);
    // Get a ray for the UVs
    Ray ray = CreateCameraRay(uv);
    // Write some colors
    RayHit hit = Trace(ray);
    float3 result = Shade(ray, hit);
    Result[id.xy] = float4(result, 1);
}