//Implemented algorithm can be found from below.
//Christopher M. Holt, Alan Stewart, Maurice Clint, and Ronald H. Perrott. 
//1987. An improved parallel thinning algorithm. Commun. ACM 30, 2 (Feb. 1987), 156–160. 
//DOI:https://doi.org/10.1145/12527.12531
#pragma kernel Thinning2OnePixel

bool AlphaOn;
Texture2D<float4> Input;
RWTexture2D<float4> Result;

struct EliminationRules
{
    int3x3 rules[6][12];
    int rulesAmount[6];
};

struct NoEliminationRules
{
    int4x4 rules[7];
    int2 centers[7];
};


int Count8NeighboursWithSetBits(int2 pos)
{
    int amount = 0;
    for (int i = -1; i < 2; i++)
    {
        for (int j = -1; j < 2; j++)
        {
            if (i == 0 & j == 0)
            {
                continue;
            }
            amount += Input[pos + int2(i, j)].x;
        }
    }
    return amount;
}



EliminationRules CreateEliminationRules()
{
    EliminationRules elimRules;
    int3x3 rules[6][12] =
    {
        {
            int3x3(
                1, 1, 0,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                0, 1, 1,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 0, 0
            )

        }, 
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        {
            int3x3(
                1, 1, 1,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                1, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                0, 0, 0
            ),
            int3x3(
                0, 1, 0,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                0, 1, 0,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                1, 1, 0,
                0, 0, 0
            ),
            //
            /*
             int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 1, 0
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                0, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 1, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                1, 1, 0
            )*/
        },
        {
            int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 1, 0
            ),
            //
            int3x3(
                0, 1, 1,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 0, 1
            ),
            /*
            int3x3(
                0, 0, 1,
                0, 1, 1,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 1, 1
            )*/ 
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        },
        {
            int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 1, 0
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            /*
            int3x3(
                1, 1, 0,
                1, 1, 0,
                0, 1, 1
            ), int3x3(
                0, 1, 1,
                1, 1, 1,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 1,
                1, 1, 1,
                1, 1, 0
            ),*/
        },
        {
            int3x3(
                1, 1, 1,
                1, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 1, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 1,
                1, 0, 0
            ), int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 1,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 1, 1
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        },
        {
            int3x3(
                1, 1, 1,
                1, 1, 1,
                1, 0, 1
            ), int3x3(
                1, 1, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 1,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 1, 1
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        }
    };
    int ruleAmounts[6] =
    {
        8, 12, 10, 8, 8, 4
    };
    
    elimRules.rules = rules;
    elimRules.rulesAmount = ruleAmounts;
    
    return elimRules;
}

NoEliminationRules CreateNoEliminationRules()
{
    NoEliminationRules noElimRules;
    int4x4 rules[7] =
    {
        int4x4(
            -1, 0, -1, -1,
             1, 1, 1, -1,
             1, 1, 1, -1,
            -1, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, -1,
             1, 1, 0, -1,
             0, 1, 0, -1,
             0, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, -1,
             0, 1, 0, -1,
             0, 1, 1, -1,
             0, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, 0,
             0, 1, 1, 0,
             0, 0, 1, -1,
            -1, -1, -1, -1
        ),
        int4x4(
            -1, 1, 1, -1,
             0, 1, 1, 0,
             0, 1, 1, -1,
            -1, -1, -1, -1
        ),
        int4x4(
             0, 0, 0, -1,
             0, 1, 1, 0,
            -1, 1, 0, 0,
            -1, -1, -1, -1
        ),
        int4x4(
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0
        ),
    };
    
    int2 centers[7] =
    {
        int2(1, 1),
        int2(2, 1),
        int2(1, 1),
        int2(1, 1),
        int2(1, 1),
        int2(1, 2),
        int2(1, 1),
    };
    
    noElimRules.rules = rules;
    noElimRules.centers = centers;
    
    return noElimRules;
}

bool IsStopEliminate(int2 pos)
{
    bool no_eliminate = false;
    bool matchs_filter = true;

    
    return no_eliminate;
}

bool IsEliminate(int2 pos)
{
    int amount = Count8NeighboursWithSetBits(pos);
    
    bool eliminate = false;
    bool matchs_filter = true;
    
    //amount == 0, 1, 8: no elimination
    if (1 < amount && amount < 8)
    {
        
    }
    else
    {
        return false;
    }

    return false;
}


    

[numthreads(8, 8, 1)]
void Thinning2OnePixel(uint3 id : SV_DispatchThreadID)
{
    //exclude Input[id.xy] == 0 first, to not run the elimination rule for optimization
    if (Input[id.xy].x == 0)
    {
        //int4(0, 0, 0, 0)
        Result[id.xy] = int4(0, 0, 0, 1);
    }
    else
    {
        bool isEliminate = IsEliminate(id.xy);
        
        
        if (isEliminate)
        {
            bool isStopEliminate = IsStopEliminate(id.xy);
            if (isStopEliminate)
            {
                Result[id.xy] = int4(1, 0, .2, 1);
            }
            else
            {
                Result[id.xy] = int4(0, .3, 0, 1);
            }
        }
        else 
        {
            Result[id.xy] = int4(1, 1, 1, 1);
        }
    }
    
    
    
    Result[id.xy] = float4(Result[id.xy].xyz, !AlphaOn);

}
