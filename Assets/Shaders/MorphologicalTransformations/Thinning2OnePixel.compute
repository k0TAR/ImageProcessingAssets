//Implemented algorithm can be found from below.
//Christopher M. Holt, Alan Stewart, Maurice Clint, and Ronald H. Perrott. 
//1987. An improved parallel thinning algorithm. Commun. ACM 30, 2 (Feb. 1987), 156–160. 
//DOI:https://doi.org/10.1145/12527.12531
#pragma kernel Thinning2OnePixel

bool AlphaOn;
Texture2D<float4> Input;
RWTexture2D<float4> Result;

#define NO_ELIM_RULE_AMOUNT 7

struct EliminationRules
{
    int3x3 rules[6][12];
    int rulesAmount[6];
};

struct NoEliminationRules
{
    int4x4 rules[NO_ELIM_RULE_AMOUNT];
    int2 centers[NO_ELIM_RULE_AMOUNT];
};


int Count8NeighboursWithSetBits(int2 coord)
{
    int amount = 0;
    for (int i = -1; i < 2; i++)
    {
        for (int j = -1; j < 2; j++)
        {
            if (i == 0 & j == 0)
            {
                continue;
            }
            amount += Input[coord + int2(i, j)].x;
        }
    }
    return amount;
}



EliminationRules CreateEliminationRules()
{
    EliminationRules elimRules;
    int3x3 rules[6][12] =
    {
        {
            int3x3(
                1, 1, 0,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                0, 1, 1,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 0, 0
            )

        }, 
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        {
            int3x3(
                1, 1, 1,
                0, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 0,
                1, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                0, 0, 0
            ),
            int3x3(
                0, 1, 0,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                0, 1, 0,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                1, 1, 0,
                0, 0, 0
            ),
            //
            /*
             int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 1, 0
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                0, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 1, 0
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                1, 1, 0
            )*/
        },
        {
            int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 0,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 0,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 0,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 1, 0
            ),
            //
            int3x3(
                0, 1, 1,
                1, 1, 0,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 0, 1
            ),
            /*
            int3x3(
                0, 0, 1,
                0, 1, 1,
                1, 1, 0
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                0, 1, 1
            )*/ 
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        },
        {
            int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 0, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 0,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 0, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 1,
                0, 0, 0
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 0,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 1, 0
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            /*
            int3x3(
                1, 1, 0,
                1, 1, 0,
                0, 1, 1
            ), int3x3(
                0, 1, 1,
                1, 1, 1,
                1, 0, 0
            ), int3x3(
                1, 1, 0,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 1,
                1, 1, 1,
                1, 1, 0
            ),*/
        },
        {
            int3x3(
                1, 1, 1,
                1, 1, 1,
                0, 0, 1
            ), int3x3(
                0, 1, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 0,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 1, 0
            ),
            //
            int3x3(
                1, 1, 1,
                1, 1, 1,
                1, 0, 0
            ), int3x3(
                1, 1, 1,
                0, 1, 1,
                0, 1, 1
            ), int3x3(
                0, 0, 1,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 0,
                1, 1, 0,
                1, 1, 1
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        },
        {
            int3x3(
                1, 1, 1,
                1, 1, 1,
                1, 0, 1
            ), int3x3(
                1, 1, 1,
                0, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 0, 1,
                1, 1, 1,
                1, 1, 1
            ), int3x3(
                1, 1, 1,
                1, 1, 0,
                1, 1, 1
            ),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
            int3x3(0, 0, 0, 0, 0, 0, 0, 0, 0),
        }
    };
    int ruleAmounts[6] =
    {
        8, 12, 10, 8, 8, 4
    };
    
    elimRules.rules = rules;
    elimRules.rulesAmount = ruleAmounts;
    
    return elimRules;
}

NoEliminationRules CreateNoEliminationRules()
{
    NoEliminationRules noElimRules;
    int4x4 rules[7] =
    {
        int4x4(
            -1, 0, -1, -1,
             1, 1, 1, -1,
             1, 1, 1, -1,
            -1, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, -1,
             1, 1, 0, -1,
             0, 1, 0, -1,
             0, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, -1,
             0, 1, 0, -1,
             0, 1, 1, -1,
             0, 0, -1, -1
        ),
        int4x4(
            -1, 0, 0, 0,
             0, 1, 1, 0,
             0, 0, 1, -1,
            -1, -1, -1, -1
        ),
        int4x4(
            -1, 1, 1, -1,
             0, 1, 1, 0,
             0, 1, 1, -1,
            -1, -1, -1, -1
        ),
        int4x4(
             0, 0, 0, -1,
             0, 1, 1, 0,
            -1, 1, 0, 0,
            -1, -1, -1, -1
        ),
        int4x4(
            0, 0, 0, 0,
            0, 1, 1, 0,
            0, 1, 1, 0,
            0, 0, 0, 0
        ),
    };
    
    int2 centers[7] =
    {
        int2(1, 1),
        int2(2, 1),
        int2(1, 1),
        int2(1, 1),
        int2(1, 1),
        int2(1, 2),
        int2(1, 1),
    };
    
    noElimRules.rules = rules;
    noElimRules.centers = centers;
    
    return noElimRules;
}



bool IsEliminate(int2 coord)
{
    int amount = Count8NeighboursWithSetBits(coord);
    
    bool eliminate = false;
    
    
    //amount == 0, 1, 8: no elimination
    if (1 < amount && amount < 8)
    {
        EliminationRules elimRules = CreateEliminationRules();
        bool matchs_filter = true;
        float width = 0, height = 0;
        Input.GetDimensions(width, height);
        int amountIndex = amount - 2;
        
        for (int k = 0; k < elimRules.rulesAmount[amountIndex]; k++)
        {
            matchs_filter = true;
            
            for (int i = -1; i < 2 && matchs_filter; i++)
            {
                for (int j = -1; j < 2 && matchs_filter; j++)
                {
                    int value = 0;
                    if (0 <= coord.x + i && coord.x + i < width && 0 <= coord.y + j && coord.y + j < height)
                    {
                        value = Input[coord + int2(i, j)].x;
                    }

                    matchs_filter = matchs_filter 
                        && (value == elimRules.rules[amountIndex][k][j * -1 + 1][i + 1]);
                }
            }
            
            eliminate = eliminate || matchs_filter;
            if (eliminate)
                break;
        }
    }
    else
    {
        return false;
    }

    return eliminate;
}

bool IsStopEliminate(int2 coord)
{
    bool no_eliminate = false;
    bool matchs_filter = true;

    NoEliminationRules noElimRules = CreateNoEliminationRules();
    float width = 0, height = 0;
    Input.GetDimensions(width, height);
    
    for (int k = 0; k < NO_ELIM_RULE_AMOUNT; k++)
    {
        matchs_filter = true;
        
        
        for (int i = -1; i < 3 && matchs_filter; i++)
        {
            for (int j = -2; j < 2 && matchs_filter; j++)
            {
                if (noElimRules.rules[k][j * -1 + 1][i + 1] == -1)
                {
                    continue;
                }
                
                int value = 0;
                if (0 <= coord.x + i && coord.x + i < width && 0 <= coord.y + j && coord.y + j < height)
                {
                    value = Input[
                        coord
                        + int2(i, j)
                        + int2(noElimRules.centers[k].y, noElimRules.centers[k].x) + int2(-1, -1)
                    ].x;
                }

                matchs_filter = matchs_filter
                        && (value == noElimRules.rules[k][j * -1 + 1][i + 1]);
            }
        }

        no_eliminate = no_eliminate || matchs_filter;
        if (no_eliminate)
            break;
    }
    
    return no_eliminate;
}


[numthreads(8, 8, 1)]
void Thinning2OnePixel(uint3 id : SV_DispatchThreadID)
{
    //exclude Input[id.xy] == 0 first, to not run the elimination rule for optimization
    if (Input[id.xy].x == 0)
    {
        //int4(0, 0, 0, 0)
        Result[id.xy] = Input[id.xy];
    }
    else
    {
        bool isEliminate = IsEliminate(id.xy);
        
        
        if (isEliminate)
        {
            bool isStopEliminate = IsStopEliminate(id.xy);
            if (isStopEliminate)
            {
                Result[id.xy] = float4(1, .5, .5, 1);
            }
            else
            {
                Result[id.xy] = float4(0, .4, 0, 1);
            }
        }
        else 
        {
            if (Input[id.xy].y > 0)
            {
                Result[id.xy] = Input[id.xy];
            }
            else
            {
                Result[id.xy] = float4(1, 1, 1, 1);
            }
        }
    }
    
    
    
    Result[id.xy] = float4(Result[id.xy].xyz, !AlphaOn);

}
