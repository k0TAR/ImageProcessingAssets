//Implemented algorithm can be found from below.
//Christopher M. Holt, Alan Stewart, Maurice Clint, and Ronald H. Perrott. 
//1987. An improved parallel thinning algorithm. Commun. ACM 30, 2 (Feb. 1987), 156–160. 
//DOI:https://doi.org/10.1145/12527.12531
#pragma kernel Thinning2OnePixel

bool AlphaOn;
Texture2D<float4> Input;
RWTexture2D<float4> Result;

static int3x3 filter2[8] =
{
    int3x3(
        1, 1, 0,
        0, 1, 0,
        0, 0, 0
    ), int3x3(
        0, 0, 1,
        0, 1, 1,
        0, 0, 0
    ), int3x3(
        0, 0, 0,
        0, 1, 0,
        0, 1, 1
    ), int3x3(
        0, 0, 0,
        1, 1, 0,
        1, 0, 0
    ),
    //
    int3x3(
        0, 1, 1,
        0, 1, 0,
        0, 0, 0
    ), int3x3(
        0, 0, 0,
        0, 1, 1,
        0, 0, 1
    ), int3x3(
        0, 0, 0,
        0, 1, 0,
        1, 1, 0
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        0, 0, 0
    )
};
//added 4 more for filter3
static int3x3 filter3[12] =
{
    int3x3(
        1, 1, 1,
        0, 1, 0,
        0, 0, 0
    ), int3x3(
        0, 1, 1,
        0, 1, 1,
        0, 0, 0
    ),int3x3(
        0, 0, 1,
        0, 1, 1,
        0, 0, 1
    ), int3x3(
        0, 0, 0,
        0, 1, 1,
        0, 1, 1
    ), int3x3(
        0, 0, 0,
        0, 1, 0,
        1, 1, 1
    ), int3x3(
        0, 0, 0,
        1, 1, 0,
        1, 1, 0
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        1, 0, 0
    ), int3x3(
        1, 1, 0,
        1, 1, 0,
        0, 0, 0
    ), 
    int3x3(
        0, 1, 0,
        1, 1, 0,
        1, 0, 0
    ), int3x3(
        0, 1, 0,
        0, 1, 1,
        0, 0, 1
    ), int3x3(
        1, 1, 0,
        0, 1, 1,
        0, 0, 0
    ), int3x3(
        0, 1, 1,
        1, 1, 0,
        0, 0, 0
    ),
    //
    /*
     int3x3(
        0, 0, 1,
        0, 1, 1,
        0, 1, 0
    ), int3x3(
        0, 0, 0,
        1, 1, 0,
        0, 1, 1
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        0, 1, 0
    ), int3x3(
        0, 0, 0,
        0, 1, 1,
        1, 1, 0
    )*/
};
//added 2 more for filter4
static int3x3 filter4[10] =
{
    int3x3(
        1, 1, 1,
        0, 1, 1,
        0, 0, 0
    ), int3x3(
        0, 0, 1,
        0, 1, 1,
        0, 1, 1
    ), int3x3(
        0, 0, 0,
        1, 1, 0,
        1, 1, 1
    ), int3x3(
        1, 1, 0,
        1, 1, 0,
        1, 0, 0
    ),
    //
    int3x3(
        1, 1, 1,
        1, 1, 0,
        0, 0, 0
    ), int3x3(
        0, 1, 1,
        0, 1, 1,
        0, 0, 1
    ), int3x3(
        0, 0, 0,
        0, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        1, 1, 0
    ),
    //
    int3x3(
        0, 1, 1,
        1, 1, 0,
        1, 0, 0
    ), int3x3(
        1, 1, 0,
        0, 1, 1,
        0, 0, 1
    ),
    /*
    int3x3(
        0, 0, 1,
        0, 1, 1,
        1, 1, 0
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        0, 1, 1
    )*/
};

static int3x3 filter5[8] =
{
    int3x3(
        1, 1, 1,
        0, 1, 1,
        0, 0, 1
    ), int3x3(
        0, 0, 1,
        0, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 0, 0,
        1, 1, 0,
        1, 1, 1
    ), int3x3(
        1, 1, 1,
        1, 1, 0,
        1, 0, 0
    ),
    //
    int3x3(
        1, 1, 1,
        1, 1, 1,
        0, 0, 0
    ), int3x3(
        0, 1, 1,
        0, 1, 1,
        0, 1, 1
    ), int3x3(
        0, 0, 0,
        1, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 1, 0,
        1, 1, 0,
        1, 1, 0
    ),
    /*
    int3x3(
        1, 1, 0,
        1, 1, 0,
        0, 1, 1
    ), int3x3(
        0, 1, 1,
        1, 1, 1,
        1, 0, 0
    ), int3x3(
        1, 1, 0,
        0, 1, 1,
        0, 1, 1
    ), int3x3(
        0, 0, 1,
        1, 1, 1,
        1, 1, 0
    ),*/
};

static int3x3 filter6[8] =
{
    int3x3(
        1, 1, 1,
        1, 1, 1,
        0, 0, 1
    ), int3x3(
        0, 1, 1,
        0, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 0, 0,
        1, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 1, 1,
        1, 1, 0,
        1, 1, 0
    ),
    //
    int3x3(
        1, 1, 1,
        1, 1, 1,
        1, 0, 0
    ), int3x3(
        1, 1, 1,
        0, 1, 1,
        0, 1, 1
    ), int3x3(
        0, 0, 1,
        1, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 1, 0,
        1, 1, 0,
        1, 1, 1
    ),
};

static int3x3 filter7[4] =
{
    int3x3(
        1, 1, 1,
        1, 1, 1,
        1, 0, 1
    ), int3x3(
        1, 1, 1,
        0, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 0, 1,
        1, 1, 1,
        1, 1, 1
    ), int3x3(
        1, 1, 1,
        1, 1, 0,
        1, 1, 1
    ),
};



int Count8NeighboursWithSetBits(int2 pos)
{
    int amount = 0;
    for (int i = -1; i < 2; i++)
    {
        for (int j = -1; j < 2; j++)
        {
            if (i == 0 & j == 0)
            {
                continue;
            }
            amount += Input[pos + int2(i, j)].x;
        }
    }
    return amount;
}

//id.xy (1,1)
int4x3 no_elim_1 = int4x3(
    -1, 0, -1,
     1, 1, 1,
     1, 1, 1,
    -1, 0, -1
);

//id.xy (2,1)
int4x3 no_elim_2 = int4x3(
    -1, 0, 0,
     1, 1, 0,
     0, 1, 0,
     0, 0, -1
);

//id.xy (1,1)
int4x3 no_elim_3 = int4x3(
    -1, 0, 0,
     0, 1, 0,
     0, 1, 1,
     0, 0, -1
);

//id.xy (1,1)
int3x4 no_elim_4 = int3x4(
    -1, 0, 0, 0,
     0, 1, 1, 0,
     0, 0, 1, -1
);

//id.xy (1,1)
int3x4 no_elim_5 = int3x4(
    -1, 1, 1, -1,
     0, 1, 1, 0,
    -1, 1, 1, -1
);

//id.xy (1,2)
int3x4 no_elim_6 = int3x4(
     0, 0, 0, -1,
     0, 1, 1, 0,
    -1, 1, 0, 0
);

//id.xy (1,1)
int4x4 no_elim_7 = int4x4(
    0, 0, 0, 0,
    0, 1, 1, 0,
    0, 1, 1, 0,
    0, 0, 0, 0
);

bool NoEliminationRules(int2 pos)
{
    bool no_eliminate = false;
    bool matchs_filter = true;
   
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 1);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -1)].x == 1);
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, -2)].x == 0);
    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, 2)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 2)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 0);
    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, 2)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 2)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 1)].x ==0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 1);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 0);
    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(2, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(2, 0)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -1)].x == 1);

    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 1)].x == 1);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(2, 0)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -1)].x == 1);

    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(-2, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-2, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -1)].x == 0);

    
    no_eliminate = no_eliminate | matchs_filter;
    
    
    matchs_filter = true;
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(2, 1)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, 0)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, 0)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(2, 0)].x == 0);
    
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -1)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -1)].x == 1);
    matchs_filter = matchs_filter & (Input[pos + int2(2, -1)].x == 0);
   
    matchs_filter = matchs_filter & (Input[pos + int2(-1, -2)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(0, -2)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(1, -2)].x == 0);
    matchs_filter = matchs_filter & (Input[pos + int2(2, -2)].x == 0);
    
    no_eliminate = no_eliminate | matchs_filter;
    /*
    int i = 0;
    int j = 0;
    
    
    for (i = 1; i > -3 & matchs_filter; i--)
    {
        for (j = -1; j < 2 & matchs_filter; j++)
        {
            if (no_elim_1[i * -1 + 1][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_1[i * -1 + 1][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    
    for (i = 2; i > -2 & matchs_filter; i--)
    {
        for (j = -1; j < 3 & matchs_filter; j++)
        {
            if (no_elim_2[i * -1 + 2][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_2[i * -1 + 2][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    for (i = 1; i > -3 & matchs_filter; i--)
    {
        for (j = -1; j < 2 & matchs_filter; j++)
        {
            if (no_elim_3[i * -1 + 1][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_3[i * -1 + 1][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    for (i = 1; i > -2 & matchs_filter; i--)
    {
        for (j = -1; j < 3 & matchs_filter; j++)
        {
            if (no_elim_4[i * -1 + 1][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_4[i * -1 + 1][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    for (i = 1; i > -2 & matchs_filter; i--)
    {
        for (j = -1; j < 3 & matchs_filter; j++)
        {
            if (no_elim_5[i * -1 + 1][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_5[i * -1 + 1][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    for (i = 1; i > -2 & matchs_filter; i--)
    {
        for (j = -2; j < 2 & matchs_filter; j++)
        {
            if (no_elim_6[i * -1 + 1][j + 2] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_6[i * -1 + 1][j + 2]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    
    for (i = 1; i > -3 & matchs_filter; i--)
    {
        for (j = -1; j < 3 & matchs_filter; j++)
        {
            if (no_elim_7[i * -1 + 1][j + 1] < 0)
                continue;
            matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == no_elim_7[i * -1 + 1][j + 1]);
        }
    }
    no_eliminate = no_eliminate | matchs_filter;
    */
    
    return no_eliminate;
}

bool EliminationRules(int2 pos)
{
    int amount = Count8NeighboursWithSetBits(pos);
    
    bool eliminate = false;
    bool matchs_filter = true;
    
    //amount == 0, 1, 8: no elimination
    if (amount == 0)
    {
        return false;
    }
    else if (amount == 1)
    {
        return false;
    }
    else if (amount == 2)
    {
    
        
        for (int k = 0; k < 8; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == filter2[k][i * -1 + 1][j + 1]);
                }

            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 3)
    {
        
        
        for (int k = 0; k < 12; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == filter3[k][i * -1 + 1][j + 1]);
                }

            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 4)
    {
                
        
        for (int k = 0; k < 10; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == filter4[k][i * -1 + 1][j + 1]);
                }
                
            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 5)
    {
                
        
        for (int k = 0; k < 8; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == filter5[k][i * -1 + 1][j + 1]);
                }
            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 6)
    {
                
        
        for (int k = 0; k < 8; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos + int2(j, i)].x == filter6[k][i * -1 + 1][j + 1]);
                }
            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 7)
    {
               
        
        for (int k = 0; k < 4; k++)
        {
            matchs_filter = true;
            for (int i = 1; i > -2 & matchs_filter; i--)
            {
                for (int j = -1; j < 2 & matchs_filter; j++)
                {
                    matchs_filter = matchs_filter & (Input[pos.xy + int2(j, i)].x == filter7[k][i * -1 + 1][j + 1]);
                }
            }
        
            //just needs to match the eight neighbour with one filter.
            eliminate = eliminate | matchs_filter;
            if (eliminate)
                break;
        }

        return eliminate;
        
        
    }
    else if (amount == 8)
    {
        return false;
    }

    return false;
}


    

[numthreads(8, 8, 1)]
void Thinning2OnePixel(uint3 id : SV_DispatchThreadID)
{
    //exclude Input[id.xy] == 0 first, to not run the elimination rule for optimization
    if (Input[id.xy].x == 0)
    {
        //int4(0, 0, 0, 0)
        Result[id.xy] = int4(0, 0, 0, !AlphaOn);
    }
    else
    {
        if (EliminationRules(id.xy) & !NoEliminationRules(id.xy))
        {
            Result[id.xy] = int4(0, 0, 1, !AlphaOn);
        }
        else if (EliminationRules(id.xy) & NoEliminationRules(id.xy))
        {
            Result[id.xy] = int4(1, 0, 0, 1);
        }
        else if (!EliminationRules(id.xy))
        {
            Result[id.xy] = int4(1, 1, 0, 1);
        }
    }
    

}
